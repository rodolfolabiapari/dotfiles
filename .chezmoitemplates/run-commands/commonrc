# DO NOT CHANGE THIS FILE BECAUSE IT IS MANAGED BY CHEZMOI READ MORE HERE
# https://github.com/rodolfolabipari/dotfiles

# EXPORTS
export EDITOR="nvim"
export GOPATH=$HOME/go/work
export GPG_TTY=$TTY
export PATH=$PATH:/bin
export PATH=$PATH:/opt/homebrew/bin
export PATH=$PATH:/sbin
export PATH=$PATH:/usr/bin
export PATH=$PATH:/usr/local/bin
export PATH=$PATH:/usr/sbin
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/homebrew/bin
export PATH=$PATH:$HOME/rlmg/bin
export ZSH=$HOME/.oh-my-zsh

# ALIAS
{{ if (eq .os "linux") }}
# Does not have bat on linux. Just batcat
alias bat=batcat
{{ end }}
alias cat="bat --paging=never"
alias CAT=cat
alias quit=exit
alias q=exit
alias get="k get"
alias grpe=grep
alias gerp=grep
alias gre=grep
alias grp=grep
alias g="git "
alias G="git "
alias k=kubectl
alias K=kubectl
# cria um pwc sem quebra de linha usando trim
alias pwc="pwd | tr -d '\n' | pbcopy"
alias PWC=pwc
alias PWD=pwd
alias sl=ls
alias LS=ls
alias SL=ls
alias tm=tmux
alias tmu=tmux
alias tmx=tmux
alias vim=nvim
alias v=vim
alias vi=vim
alias sz="source ~/.zshrc && echo \"~/.zshrc reloaded.\"" # Reload zsh

# Makes file commands verbose.
alias cp='cp -v';
alias CP=cp
alias mv='mv -v';
alias MV=mv
# Creates parent directories on demand.
alias mkdir='mkdir -pv'

# Finds directories.
alias fd='find . -type d -name'

# Finds files.
alias ff='find . -type f -name'


# Time
# -----------------------------------------------------------------------------

# Gets local/UTC date and time in ISO-8601 format `YYYY-MM-DDThh:mm:ss`.
alias now='date +"%Y-%m-%dT%H:%M:%S"'
alias unow='date -u +"%Y-%m-%dT%H:%M:%S"'

# Gets date in `YYYY-MM-DD` format`
alias nowdate='date +"%Y-%m-%d"'
alias unowdate='date -u +"%Y-%m-%d"'

# Gets time in `hh:mm:ss` format`
alias nowtime='date +"%T"'
alias unowtime='date -u +"%T"'

# Gets Unix time stamp`
alias timestamp='date -u +%s'

# Gets week number in ISO-8601 format `YYYY-Www`.
alias week='date +"%Y-W%V"'

# Gets weekday number.
alias weekday='date +"%u"'



# Networking
# -----------------------------------------------------------------------------

# Pings hostname(s) 30 times in quick succession.
if [[ "$OSTYPE" =~ ^(cygwin|mingw|msys) ]]; then
    alias fastping='ping -n 30'
else
    alias fastping='ping -c 30 -i.2'
fi

# Flushes the DNS cache.
if [[ "$OSTYPE" =~ ^darwin ]]; then
    alias flushdns='dscacheutil -flushcache; sudo killall -HUP mDNSResponder;echo DNS cache flushed'
elif [[ "$OSTYPE" =~ ^(cygwin|mingw|msys) ]]; then
    alias flushdns='ipconfig //flushdns'
else
    alias flushdns='sudo /etc/init.d/dns-clean restart && echo DNS cache flushed'
fi

# Gets all IP addresses.
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# Gets local IP address.
if [[ "$OSTYPE" =~ ^darwin ]]; then
    alias localip='ipconfig getifaddr en0'
elif [[ "$OSTYPE" =~ ^(cygwin|mingw|msys) ]]; then
    # shellcheck disable=SC2142
    alias localip="netstat -rn | grep -w '0.0.0.0' | awk '{ print \$4 }'"
else
    alias localip="ip route get 1 | awk '{print \$NF;exit}'"
fi

# Gets external IP address.
if command -v dig &> /dev/null; then
    alias publicip='dig +short myip.opendns.com @resolver1.opendns.com'
elif command -v curl > /dev/null; then
    alias publicip='curl --silent --compressed --max-time 5 --url "https://ipinfo.io/ip"'
else
    alias publicip='wget -qO- --compression=auto --timeout=5 "https://ipinfo.io/ip"'
fi

# Sends HTTP requests.
command -v lwp-request &> /dev/null && for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
    #shellcheck disable=SC2139
    alias $method="lwp-request -m '$method'"
done
unset method;


# Power management
# -----------------------------------------------------------------------------

# Locks the session.
if [[ "$OSTYPE" =~ ^darwin ]]; then
    alias lock='pmset displaysleepnow'
elif [[ "$OSTYPE" =~ ^(cygwin|mingw|msys) ]]; then
    alias lock='rundll32.exe user32.dll,LockWorkStation'
elif command -v vlock &> /dev/null; then
    alias lock='vlock --all'
elif command -v gnome-screensaver-command &> /dev/null; then
    alias lock='gnome-screensaver-command --lock'
fi

# Hibernates the system.
if [[ "$OSTYPE" =~ ^darwin ]]; then
    alias hibernate='pmset sleep now'
elif [[ "$OSTYPE" =~ ^(cygwin|mingw|msys) ]]; then
    alias hibernate='shutdown.exe /h'
else
    alias hibernate='systemctl suspend'
fi

# Restarts the system.
if [[ "$OSTYPE" =~ ^darwin ]]; then
    alias reboot='osascript -e "tell application \"System Events\" to restart"'
elif [[ "$OSTYPE" =~ ^(cygwin|mingw|msys) ]]; then
    alias reboot='shutdown.exe /r'
else
    alias reboot='sudo /sbin/reboot'
fi

# Shuts down the system.
if [[ "$OSTYPE" =~ ^darwin ]]; then
    alias poweroff='osascript -e "tell application \"System Events\" to shut down"'
elif [[ "$OSTYPE" =~ ^(cygwin|mingw|msys) ]]; then
    alias poweroff='shutdown.exe /s'
else
    alias poweroff='sudo /sbin/poweroff'
fi

# this line receives the arch var by passing a dictionary argument
{{ if (or (and (eq .arch "arm") (eq .os "linux"))
      (and (eq .arch "amd64") (eq .os "darwin")))}}
# TODO not found eza for pi, until now
# TODO not found eza builded to amd64 darwin
unalias ls
{{ else }}
alias ls="eza"
eval "$(zoxide init --cmd cd zsh)"
{{ end }}

# Common paths
# -----------------------------------------------------------------------------

# Navigates to user paths.
alias dls='cd $HOME/Downloads'
alias docs='cd $HOME/Documents'
alias dt='cd $HOME/Desktop'


# Functions Procedures Methods
# -----------------------------------------------------------------------------
function sleep_with_countdown() {

  # Help message
  local help_message="Usage: sleep_with_countdown <duration>

  Sleeps for the specified duration while displaying a countdown.

  Arguments:
    <duration>      Duration in seconds to sleep for. Must be a positive integer.

  Options:
    -h, --help      Show this help message and exit."

  # Check if -h or --help option is provided
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "$help_message"
    return 0
  fi

  # Check if an argument is provided
  if [[ $# -ne 1 ]]; then
    echo "Usage: sleep_with_countdown <duration>"
    return 1
  fi

  # Check if the argument is a positive integer
  if ! [[ $1 =~ ^[0-9]+$ ]] || [[ $1 -le 0 ]]; then
    echo "Duration must be a positive integer"
    return 1
  fi

  local duration=$1
  local countdown=$1

  # Start the countdown
  printf "\rCounting down: %3d seconds left (0%%)" $countdown

  # The do-while loop
  while true; do
    # Wait for one second
    sleep 1

    # Update the countdown value
    ((countdown--))

    # Calculate the percentage
    local percent=$((100 - countdown * 100 / duration))

    # Print the countdown progress
    printf "\rCounting down: %3d seconds left (%d%%)" $countdown $percent

    # Check if the countdown reaches zero
    if [[ $countdown -eq 0 ]]; then
      echo
      break
    fi
  done
}


# Function to print messages in bold and with different colors
function print_message() {
  local color="$1"
  shift

  # Help message
  local help_message="Usage: $color [OPTIONS] <message>

  Prints a message in bold and with $color text.

  Arguments:
    <message>      Message to be printed.

  Options:
    -h, --help     Show this help message and exit.
    -n             Do not append a newline character at the end of the message.
    -e             Enable interpretation of backslash escapes."

  local newline_flag=""
  local escape_flag=""

  # Parse options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        echo "$help_message"
        return 0
        ;;
      -n)
        newline_flag="-n"
        ;;
      -e)
        escape_flag="-e"
        ;;
      *)
        break
        ;;
    esac
    shift
  done

  # Check if an argument is provided
  if [[ $# -ne 1 ]]; then
    echo "Usage: $color [OPTIONS] <message>"
    return 1
  fi

  # Print the message with the specified color
  echo $newline_flag $escape_flag "\033[1;$color"m"$1\033[0m"
}

# Function to print success messages in bold and green
function print_success() {
  print_message "32" "$@"
}

# Function to print status messages in bold and white
function print_status() {
  print_message "37" "$@"
}

# Function to print alert messages in bold and yellow
function print_alert() {
  print_message "33" "$@"
}

# Function to print error messages in bold and red
function print_error() {
  print_message "31" "$@"
}


# Post sources
# Load ZSH Syntax
source $ZSH/custom/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# ZSH syntax using catppuccin theme
source $ZSH/custom/plugins/zsh-syntax-highlighting/themes/catppuccin/themes/catppuccin_frappe-zsh-syntax-highlighting.zsh
# Load p10k
source $ZSH/custom/themes/powerlevel10k/powerlevel10k.zsh-theme


# DO NOT CHANGE THIS FILE BECAUSE IT IS MANAGED BY CHEZMOI READ MORE HERE
# https://github.com/rodolfolabipari/dotfiles
