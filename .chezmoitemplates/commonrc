# DO NOT CHANGE THIS FILE BECAUSE IT IS MANAGED BY CHEZMOI READ MORE HERE
# https://github.com/rodolfolabipari/dotfiles

# EXPORTS
export COINTOP_CONFIG="${HOME}/.config/cointop/config.toml"
export EDITOR="nvim"
export GOPATH=$HOME/go/work
export GPG_TTY=$(tty)
export PATH=$PATH:/bin
export PATH=$PATH:/opt/homebrew/bin
export PATH=$PATH:/opt/homebrew/sbin
export PATH=$PATH:/sbin
export PATH=$PATH:/usr/bin
export PATH=$PATH:/usr/local/bin
export PATH=$PATH:/usr/sbin
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:$HOME/.tfenv/bin
export PATH=$PATH:$HOME/.tmux/plugins/tmuxifier/bin
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/homebrew/bin
export PATH=$PATH:$HOME/rlmg/bin
# Nao configurar essa variavel direto no zsh pois esta sendo configurada
#  via alacritty. TODO: Seria bom fazer uma validacao e configurar caso ela nao
#  exista
#export TERM="xterm-256color"
export ZSH=$HOME/.oh-my-zsh

# Alias
# ------------------------------------------------------------
alias cat="bat --paging=never --style=-header,-grid"
alias CAT=cat
alias cdob="cd $(cat ~/.config/nvim/lua/config_local.lua | grep 'obsidian_work_path' | awk '{print $5}')"
alias cp='cp -v';
alias CP=cp
alias fvim='nvim $(fzf -m --preview="bat --color=always {}")'
alias G="git "
alias g="git "
alias gerp=grep
alias get="k get"
alias gre=grep
alias grp=grep
alias grpe=grep
alias gti="git "
alias K=kubectl
alias k=kubectl
alias less="bat --paging=always --style=-header,-grid"
alias LS=ls
alias mkdir='mkdir -pv'
alias mv='mv -v';
alias MV=mv
alias mv=mv
alias now='date +"%Y-%m-%dT%H:%M:%S"'
alias nowdate='date +"%Y-%m-%d"'
alias nowtime='date +"%T"'
alias pwc="pwd | tr -d '\n' | pbcopy"
alias PWC=pwc
alias PWD=pwd
alias q=exit
alias quit=exit
alias SL=ls
alias sl=ls
alias sz="source ~/.zshrc && echo \"~/.zshrc reloaded.\"" # Reload zsh
alias t=task
alias tak=task
alias taks=task
alias tas=task
alias timestamp='date -u +%s'
alias tm=tmux
alias tmu=tmux
alias tmx=tmux
alias tsk=task
alias unow='date -u +"%Y-%m-%dT%H:%M:%S"'
alias unowdate='date -u +"%Y-%m-%d"'
alias unowtime='date -u +"%T"'
alias v=nvim
alias vi=nvim
alias vim=nvim
alias vimdiff="nvim -d "
alias vin=nvim
alias week='date +"%Y-W%V"'
alias weekday='date +"%u"'
alias dls='cd $HOME/Downloads'
alias docs='cd $HOME/Documents'
alias dt='cd $HOME/Desktop'


# this line receives the arch var by passing a dictionary argument
{{ if (or (and (eq .arch "arm") (eq .os "linux"))
      (and (eq .arch "amd64") (eq .os "darwin")))}}
# TODO: not found eza for pi, until now
# TODO: not found eza builded to amd64 darwin
unalias ls
{{ else }}
alias ls="eza --icons=always"
eval "$(zoxide init --cmd cd zsh)"
{{ end }}


# Functions Procedures Methods
# -----------------------------------------------------------------------------
function sleep_with_countdown() {

  # Help message
  local help_message="Usage: sleep_with_countdown <duration>

  Sleeps for the specified duration while displaying a countdown.

  Arguments:
    <duration>      Duration in seconds to sleep for. Must be a positive integer.

  Options:
    -h, --help      Show this help message and exit."

  # Check if -h or --help option is provided
  if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    echo "$help_message"
    return 0
  fi

  # Check if an argument is provided
  if [[ $# -ne 1 ]]; then
    echo "Usage: sleep_with_countdown <duration>"
    return 1
  fi

  # Check if the argument is a positive integer
  if ! [[ $1 =~ ^[0-9]+$ ]] || [[ $1 -le 0 ]]; then
    echo "Duration must be a positive integer"
    return 1
  fi

  local duration=$1
  local countdown=$1

  # Start the countdown
  printf "\rCounting down: %3d seconds left (0%%)" $countdown

  # The do-while loop
  while true; do
    # Wait for one second
    sleep 1

    # Update the countdown value
    ((countdown--))

    # Calculate the percentage
    local percent=$((100 - countdown * 100 / duration))

    # Print the countdown progress
    printf "\rCounting down: %3d seconds left (%d%%)" $countdown $percent

    # Check if the countdown reaches zero
    if [[ $countdown -eq 0 ]]; then
      echo
      break
    fi
  done
}


# Function to print messages in bold and with different colors
function print_message() {
  local color="$1"
  shift

  # Help message
  local help_message="Usage: $color [OPTIONS] <message>

  Prints a message in bold and with $color text.

  Arguments:
    <message>      Message to be printed.

  Options:
    -h, --help     Show this help message and exit.
    -n             Do not append a newline character at the end of the message.
    -e             Enable interpretation of backslash escapes."

  local newline_flag=""
  local escape_flag=""

  # Parse options
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -h|--help)
        echo "$help_message"
        return 0
        ;;
      -n)
        newline_flag="-n"
        ;;
      -e)
        escape_flag="-e"
        ;;
      *)
        break
        ;;
    esac
    shift
  done

  # Check if an argument is provided
  if [[ $# -ne 1 ]]; then
    echo "Usage: $color [OPTIONS] <message>"
    return 1
  fi

  # Print the message with the specified color
  echo $newline_flag $escape_flag "\033[1;$color"m"$1\033[0m"
}

# Function to print success messages in bold and green
function print_success() {
  print_message "32" "$@"
}

# Function to print status messages in bold and white
function print_status() {
  print_message "37" "$@"
}

# Function to print alert messages in bold and yellow
function print_alert() {
  print_message "33" "$@"
}

# Function to print error messages in bold and red
function print_error() {
  print_message "31" "$@"
}


# Post sources
# Load ZSH Syntax
source $HOME/.local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
# ZSH syntax using catppuccin theme
source $HOME/.local/share/zsh-syntax-highlighting-catppuccin/themes/catppuccin_frappe-zsh-syntax-highlighting.zsh

# Load p10k
source $HOME/.local/share/powerlevel10k/powerlevel10k.zsh-theme

# DO NOT CHANGE THIS FILE BECAUSE IT IS MANAGED BY CHEZMOI READ MORE HERE
# https://github.com/rodolfolabipari/dotfiles

