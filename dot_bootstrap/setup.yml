---
- name: Machine setup
  hosts: localhost
  become: false # sudo global falso
  connection: local
  gather_facts: true
  vars:
    regular_user: "{{ ansible_env.SUDO_USER or ansible_user }}"
    package_manager:
      Linux_Mint: apt
      MacOS: homebrew
      Raspberry_Pi: apt

  tasks:
  # - name: Get my user
  #   set_fact:
  #     remote_regular_user: "{{ ansible_env.SUDO_USER or ansible_user_id }}"

  - name: Exibir distribuição do sistema operacional
    debug:
      msg: "Distribuição {{ ansible_distribution }} do sistema {{ ansible_system }}"
      
  - name: Atualizar lista de pacotes
    become: true
    apt:
      update_cache: yes

        
  - name: APT Install Basic/Essencial Linux Package
    become: true
    when: ansible_system == 'Linux'
    block:
      - name: Install APT packages
        apt:
          name:
            - ansible
            - bat
            - bc
            - curl
            - docker
            - docker-compose
            - flatpak
            - gcc
            - git
            - gpg
            - grep
            - htop
            - ipcalc
            - jq
            - less
            - pwgen
            - ripgrep
            - sed
            - snap
            - tar
            - telnet
            - tmux
            - traceroute
            - tree
            - unzip
            - vim
            - xclip
            - zip
            - zoxide
            - zsh
          state: present
        
  - name: APT Install Common packages for Linux
    become: true
    when: ansible_distribution == 'Ubuntu' or ansible_distribution == 'Linux Mint'
    block:
      - name: Install APT packages
        apt:
          name:
            - awscli
            - btop
            - flameshot
            - google-cloud-cli
            - google-cloud-sdk-gke-gcloud-auth-plugin
            - google-cloud-sdk-terraform-tools
            - gparted
            - graphviz
            - taskwarrior
            - terminator
            - zsh-syntax-highlighting
          state: present

      - name: Install SNAP packages
        community.general.snap:
          name:
            - brave
            - canonical-livepatch
            - chezmoi
            - code
            - docker
            - google-cloud-sdk
            - helm
            - postman
            - rpi-imager
            - spotify
            - sublime-text
            - telegram-desktop
            - zoom-client
          state: present

      - name: Install SNAP packages with --beta --classic options
        community.general.snap:
          name: 
            - nvim
          state: present
          classic: yes
          channel: beta

      - name: Install Flatpak packages
        command:
          cmd: "/usr/bin/flatpak install --system --noninteractive flathub {{ item }}"
        loop: "{{ flatpak_packages }}"
        vars:
          flatpak_packages:
            - 'org.videolan.VLC'
            - 'com.stremio.Stremio'



  # Copia o arquivo de config do vscode para os OS
  - name: Garantir a config do VSCode para todos os OS
    block:
      - name: Definir variáveis de caminho para o arquivo de configuração
        set_fact:
          settings_json_src: "$HOME/.local/share/chezmoi/dot_config/settings.json"
          settings_json_dest_macos: "{{ ansible_env.HOME }}/Library/Application Support/Code/User/settings.json"
          settings_json_dest_linux: "$HOME/.config/Code/User/settings.json"

      - name: Copiar settings.json do VSCode para o macOS
        ansible.builtin.copy:
          src: "{{ settings_json_src }}"
          dest: "{{ settings_json_dest_macos }}"
          remote_src: yes
        when: ansible_distribution == 'MacOSX'

      - name: Copiar settings.json do VSCode para o Linux
        ansible.builtin.copy:
          src: "{{ settings_json_src }}"
          dest: "{{ settings_json_dest_linux }}"
          remote_src: yes
        when: ansible_system == 'Linux'

  - name: APT Install common packages for Raspberry Pi and Linux
    become: true
    when: ansible_distribution == 'MacOSX'
    block:
      - name: Install Homebrew
        shell:
          cmd: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        args:
          creates: /usr/local/bin/brew  # Verifica se o Homebrew já está instalado

      - name: Run Brewfile
        shell:
          cmd: brew bundle --file="./dot_bootstrap/macock/Brewfile-clean"
